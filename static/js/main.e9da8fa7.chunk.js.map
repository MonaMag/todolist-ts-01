{"version":3,"sources":["serviceWorker.ts","api/tasks-api.ts","api/todolists-api.ts","api/auth-api.ts","utils/error-utils.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/Todolists/todolists-reducer.ts","features/Todolists/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/Todolists/Todolist/Task/Task.tsx","features/Todolists/Todolist/Todolist.tsx","features/Todolists/Todolists.tsx","components/ErrorSnackbar/ErrirSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","authAPI","then","res","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handleServerNetworkError","error","message","initialState","isAuth","setIsAuthAC","type","status","isAppInitialized","setAppInitializedAC","ADD_TODOLIST","REMOVE_TODOLIST","CHANGE_TODOLIST_TITLE","CHANGE_TODOLIST_FILTER","SET_TODOLIST","SET_TODOLIST_STATUS","tasksAPI","todolistId","taskId","model","REMOVE_TASK","ADD_TASK","UPDATE_TASK","SET_TASKS","updateTaskTC","taskID","todolistID","domainModel","getState","task","tasks","find","t","apiModel","description","priority","startDate","deadline","resultCode","action","updateTaskAC","catch","console","warn","AddItemForm","React","memo","addItem","disabled","log","useState","setError","setTitle","onClickAddItem","trimmedTitle","trim","TextField","size","value","onKeyPress","e","key","onChange","currentTarget","label","variant","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","changeTitle","editMode","setEditMode","onEditMode","useCallback","offEditMode","onBlur","autoFocus","onDoubleClick","Task","removeTask","changeTaskStatus","changeTaskTitle","removeTaskHandler","onChangeHandler","checked","Completed","New","changeTaskTitleHandler","className","Checkbox","Delete","Todolist","demo","useDispatch","useEffect","todolist","items","deleteTodoListHendler","deleteTodoList","changeTodolistTitleHandler","newTitle","changeTodolistTitle","addTaskHandler","addTask","onClickAllFilter","changeFilter","onClickActiveFilter","onClickCompletedFilter","tasksForTodolist","filter","entityStatus","style","listStyle","paddingLeft","map","Button","marginLeft","Todolists","todolists","useSelector","state","auth","thunk","item","addTaskTC","removeTaskAC","removeTaskTC","todoListID","addTodoList","addTodolistTC","removeTodoList","setTodolistStatusAC","removeTodolistAC","removeTodolistTC","changeTodolistTitleAC","changeTodolistFilterAC","Grid","container","padding","spacing","justifyContent","tl","Paper","elevation","to","Alert","ErrorSnackbars","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","validate","values","email","password","initialValues","rememberMe","onSubmit","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","errors","FormControlLabel","control","App","logoutHandler","AppBar","position","Toolbar","edge","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","from","top","left","CircularProgress","width","rootReducer","combineReducers","todoListId","newState","copyState","forEach","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e9da8fa7.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. AppWithUserState is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from \"axios\";\n\n\nconst instance = axios.create({\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\n    withCredentials: true,\n    headers: {\n        'api-key': 'aa8b38a0-d891-47fb-a84d-9f4fa4fde0d7'\n    }\n})\n\n\n//types\nexport type TaskType = {\n    description: string\n    title: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n    id: string\n    todoListId: string\n    order: number\n    addedDate: string\n}\ntype GetTasksResponseType = {\n    items: TaskType[]\n    totalCount: number\n    error: string | null\n}\n\nexport enum TaskStatuses {\n    New = 0,\n    InProgress = 1,\n    Completed = 2,\n    Draft = 3\n}\n\nexport enum TaskPriorities {\n    Low = 0,\n    Middle = 1,\n    Hi = 2,\n    Urgently = 3,\n    Later = 4\n}\n\nexport type TaskUpdateModelType = {\n    title: string\n    description: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n}\nexport type ResponseType<D = {}> = {\n    resultCode: number\n    messages: Array<string>\n    data: D\n}\n\n//api\nexport const tasksAPI = {\n    getTasks(todolistId: string) {\n        return instance.get<GetTasksResponseType>(`todo-lists/${todolistId}/tasks`);\n    },\n    deleteTask(todolistId: string, taskId: string) {\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\n    },\n    createTask(todolistId: string, title: string) {\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, {title: title})\n    },\n    updateTask(todolistId: string, taskId: string, model: TaskUpdateModelType) {\n        return instance.put<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\n\n    }\n}","import axios from \"axios\";\n\n\nconst instance = axios.create({\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\n    withCredentials: true,\n    headers: {\n        'api-key': 'aa8b38a0-d891-47fb-a84d-9f4fa4fde0d7'\n    }\n})\nexport type TodolistType = {\n    id: string\n    title: string\n    addedDate: string\n    order: number\n}\n/*\ntype CreateTodolistResponseType = {\n    resultCode: number\n    messages: string[],\n    data: {\n        item:  TodolistType\n    }\n}\n\ntype DeleteTodolistResponseType = {\n    resultCode: number\n    messages: Array<string>\n    data: {}\n}\n\ntype UpdateTodolistResponseType = {\n    resultCode: number\n    messages: Array<string>\n    data: {}\n}*/\n\ntype ResponseType<D = {}> = {\n    resultCode: number\n    messages: Array<string>\n    data: D\n}\n\nexport const todolistsAPI = {\n    getTodolists() {\n        const promise = instance.get<Array<TodolistType>>('todo-lists');\n        return promise;\n    },\n    createTodolist(title: string) {\n        const promise = instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title})\n        return promise;\n    },\n    deleteTodolist(id: string) {\n        const promise = instance.delete<ResponseType>(`todo-lists/${id}`);\n        return promise;\n    },\n    updateTodolist(id: string, title: string) {\n        return instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\n    }\n}\n","import axios from \"axios\";\n\n\nconst instance = axios.create({\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\n    withCredentials: true,\n    headers: {\n        'api-key': 'aa8b38a0-d891-47fb-a84d-9f4fa4fde0d7'\n    }\n})\n\n//type--------------------------------------------------------------------------->\ntype ResponseType<D = {}> = {\n    resultCode: number\n    messages: Array<string>\n    data: D\n}\nexport type LoginParamsType = {\n    email: string\n    password: string\n    rememberMe: boolean\n    captcha?: string\n}\n\n\n//api----------------------------------------------------------------------------->\nexport const authAPI = {\n    authMe() {\n        const promise = instance.get<ResponseType<{ id: number, email: string, login: string }>>('auth/me').then(res => res.data)\n        return promise\n    },\n    login(data: LoginParamsType) {\n        const promise = instance.post<ResponseType<{ userId?: number }>>('auth/login', data)\n        return promise;\n    },\n    logout() {\n        instance.delete<ResponseType<{ userId?: number }>>('auth/login').then(res => res.data)\n        return instance.delete<ResponseType>('auth/login').then(res => res.data)\n    }\n\n}\n","import {setAppErrorAC, setAppStatusAC} from \"../app/app-reducer\";\nimport {Dispatch} from \"redux\";\nimport {ResponseType} from \"../api/tasks-api\";\nimport {ThunkDispatchType} from \"../features/Todolists/tasks-reducer\";\n\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<ThunkDispatchType>) => {\n    if (data.messages.length) {\n        dispatch(setAppErrorAC(data.messages[0]));\n    } else {\n        dispatch(setAppErrorAC('Some error occurred'));\n    }\n    dispatch(setAppStatusAC('failed'));\n}\n\n\nexport const handleServerNetworkError = (error: {message: string}, dispatch: Dispatch<ThunkDispatchType>) => {\n    dispatch(setAppErrorAC(error.message ? error.message : 'Some error occurred'))\n    dispatch(setAppStatusAC('failed'));\n}\n\n","import {AppReducerActionsType, setAppStatusAC} from \"../../app/app-reducer\";\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\nimport {authAPI, LoginParamsType} from \"../../api/auth-api\";\nimport {AppThunkType} from \"../../app/store\";\n\n\n//type ------------------------------------------------------------------->\nexport type AuthReducerActionsType = ReturnType<typeof setIsAuthAC>\nexport type AuthStateType   = typeof initialState\nexport type ThunkDispatchType = AuthReducerActionsType | AppReducerActionsType;\n\n\n//reducer ----------------------------------------------------------------->\nconst initialState = {\n    isAuth: false\n};\nexport const authReducer = (state = initialState, action: AuthReducerActionsType): AuthStateType => {\n    switch (action.type) {\n        case 'login/SET_IS_AUTH':\n            return {...state, isAuth: action.isAuth}\n        default:\n            return state;\n    }\n}\n\n//actions ---------------------------------------------------------------->\nexport const setIsAuthAC = (isAuth: boolean) =>\n    ({type: 'login/SET_IS_AUTH', isAuth} as const)\n\n//thunks ----------------------------------------------------------------->\n\n\nexport const loginTC = (data: LoginParamsType): AppThunkType => (dispatch) => {\n    dispatch(setAppStatusAC('loading'))\n    authAPI.login(data)\n        .then(res => {\n            if (res.data.resultCode === 0) {\n                dispatch(setIsAuthAC(true))\n                dispatch(setAppStatusAC('succeeded'))\n            } else {\n                handleServerAppError(res.data, dispatch)\n            }\n        })\n        .catch(error => {\n            handleServerNetworkError(error, dispatch)\n        })\n}\n\nexport const logoutTC = (): AppThunkType => dispatch => {\n    dispatch(setAppStatusAC('loading'))\n    authAPI.logout()\n        .then(data => {\n            if(data.resultCode === 0) {\n                dispatch(setIsAuthAC(false))\n                dispatch(setAppStatusAC('succeeded'))\n            } else {\n                handleServerAppError(data, dispatch)\n            }\n        })\n        .catch(error => {\n            handleServerNetworkError(error, dispatch)\n        })\n}","import {authAPI} from \"../api/auth-api\";\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\nimport {setIsAuthAC} from \"../features/Login/auth-reducer\";\nimport {AppThunkType} from \"./store\";\n\n\n\n//type ------------------------------------------------------------------->\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed';\nexport type ErrorType = null | string;\n\nexport type SetAppErrorAT = ReturnType<typeof setAppErrorAC>;\nexport type SetAppStatusAT = ReturnType<typeof setAppStatusAC>;\nexport type SetAppInitializedAT = ReturnType<typeof setAppInitializedAC>;\n\nexport type AppReducerActionsType = SetAppErrorAT | SetAppStatusAT | SetAppInitializedAT;\nexport type AppReducerStateType = typeof initialState;\n\n\n//reducer ----------------------------------------------------------------->\nconst initialState = {\n    //происходит ли сейчас взаимодействие с сервером\n    status: 'idle' as RequestStatusType,\n    //если ошибка какая-то глобальная произойдет - мы запишем текст ошибки сюда\n    error: null as ErrorType,\n    //true когда приложение проинициализировалось (проверили пользователя, настройки получили и тд)\n    isAppInitialized: false,\n}\n\nexport const appReducer = (state: AppReducerStateType = initialState, action: AppReducerActionsType): AppReducerStateType => {\n    switch (action.type) {\n        case 'APP/SET-STATUS':\n            return {...state, status: action.status}\n        case 'APP/SET-ERROR':\n            return {...state, error: action.error}\n        case 'APP/SET-APP-INITIALIZED':\n            return {...state, isAppInitialized: action.isAppInitialized}\n        default:\n            return state\n    }\n}\n\n//actions ---------------------------------------------------------------->\nexport const setAppErrorAC = (error: ErrorType) => ({type: 'APP/SET-ERROR', error}) as const;\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status}) as const;\nexport const setAppInitializedAC = (isAppInitialized: boolean) => ({type: 'APP/SET-APP-INITIALIZED', isAppInitialized} as const)\n\n\n//thunks ----------------------------------------------------------------->\n\nexport const initializeAppTC = ():AppThunkType => dispatch => {\n    dispatch(setAppStatusAC('loading'))\n    authAPI.authMe()\n        .then(data => {\n            if(data.resultCode === 0) {\n                dispatch(setIsAuthAC(true))\n                dispatch(setAppInitializedAC(true))\n                dispatch(setIsAuthAC(true))\n                dispatch(setAppStatusAC('succeeded'))\n            } else {\n                handleServerAppError(data, dispatch)\n                dispatch(setAppInitializedAC(true))\n            }\n        })\n        .catch(error => {\n            handleServerNetworkError(error, dispatch)\n        })\n}","import {todolistsAPI, TodolistType} from \"../../api/todolists-api\";\nimport {Dispatch} from \"redux\";\nimport {AppReducerActionsType, RequestStatusType, setAppStatusAC} from \"../../app/app-reducer\";\nimport {handleServerNetworkError} from \"../../utils/error-utils\";\nimport {AppThunkType} from \"../../app/store\";\n\n\nconst ADD_TODOLIST = 'ADD_TODOLIST';\nconst REMOVE_TODOLIST = 'REMOVE_TODOLIST';\nconst CHANGE_TODOLIST_TITLE = 'CHANGE_TODOLIST_TITLE';\nconst CHANGE_TODOLIST_FILTER = 'CHANGE_TODOLIST_FILTER';\nconst SET_TODOLIST = 'SET_TODOLIST';\nconst SET_TODOLIST_STATUS = 'SET_TODOLIST_STATUS';\n\n//type ------------------------------------------------------------------->\nexport type FilterValuesType = 'all' | 'active' | 'completed';\n\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>\nexport type SetTodolistActionType = ReturnType<typeof setTodolistsAC>\n\nexport type TodolistReducerActionType =\n    | ReturnType<typeof removeTodolistAC>\n    | ReturnType<typeof addTodolistAC>\n    | ReturnType<typeof changeTodolistTitleAC>\n    | ReturnType<typeof changeTodolistFilterAC>\n    | ReturnType<typeof setTodolistsAC>\n    | ReturnType<typeof setTodolistStatusAC>\n\nexport type TodolistDomainType = TodolistType & {\n    filter: FilterValuesType\n    entityStatus: RequestStatusType\n}\ntype ThunkDispatchType = TodolistReducerActionType | AppReducerActionsType\n\n//initial state ---------------------------------------------------------->\nconst initialState: Array<TodolistDomainType> = []\n\n\n//reducer ----------------------------------------------------------------->\nexport const todolistReducer = (state = initialState, action: TodolistReducerActionType): Array<TodolistDomainType> => {\n    switch (action.type) {\n        case ADD_TODOLIST:\n            return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\n\n        case REMOVE_TODOLIST:\n            return state.filter(tl => tl.id !== action.todolistID)\n\n        case CHANGE_TODOLIST_TITLE:\n            return state.map(tl => tl.id === action.todolistID ? {...tl, title: action.newTitle} : tl)\n\n        case  SET_TODOLIST_STATUS:\n            return state.map(tl => tl.id === action.todolistID ? {...tl, entityStatus: action.status} : tl)\n\n        case CHANGE_TODOLIST_FILTER:\n            return state.map(tl => tl.id === action.todolistID ? {...tl, filter: action.filter} : tl)\n\n        case SET_TODOLIST:\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\n\n        default:\n            return state\n    }\n}\n\n//actions ---------------------------------------------------------------->\nexport const removeTodolistAC = (todolistID: string) => ({type: 'REMOVE_TODOLIST', todolistID: todolistID} as const);\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD_TODOLIST', todolist} as const);\nexport const changeTodolistTitleAC = (todolistID: string, title: string) => ({\n    type: 'CHANGE_TODOLIST_TITLE',\n    newTitle: title,\n    todolistID\n} as const);\nexport const changeTodolistFilterAC = (todolistID: string, filter: FilterValuesType) => ({\n    type: 'CHANGE_TODOLIST_FILTER',\n    filter,\n    todolistID\n} as const);\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({\n    type: 'SET_TODOLIST',\n    todolists: todolists\n} as const);\nexport const setTodolistStatusAC = (todolistID: string, status: RequestStatusType) => ({\n    type: 'SET_TODOLIST_STATUS',\n    status,\n    todolistID\n} as const);\n\n\n//thunks ----------------------------------------------------------------->\nexport const fetchTodolistsTC = (): AppThunkType => {\n    return (dispatch) => {\n        dispatch(setAppStatusAC('loading'))\n        todolistsAPI.getTodolists()\n            .then(res => {\n                dispatch(setTodolistsAC(res.data));\n                dispatch(setAppStatusAC('succeeded'));\n            })\n            .catch((error) => {\n                handleServerNetworkError(error, dispatch);\n            })\n    }\n}\n\nexport const removeTodolistTC = (todolistID: string) => {\n    return (dispatch: Dispatch<ThunkDispatchType>) => {\n        dispatch(setAppStatusAC('loading'))\n        dispatch(setTodolistStatusAC(todolistID, 'loading'))\n        todolistsAPI.deleteTodolist(todolistID)\n            .then(res => {\n                let action = removeTodolistAC(todolistID);\n                dispatch(action);\n                dispatch(setAppStatusAC('succeeded'));\n            })\n    }\n}\n\nexport const addTodolistTC = (title: string) => {\n    return (dispatch: Dispatch<ThunkDispatchType>) => {\n        dispatch(setAppStatusAC('loading'));\n        todolistsAPI.createTodolist(title)\n            .then(res => {\n                let action = addTodolistAC(res.data.data.item);\n                dispatch(action);\n                dispatch(setAppStatusAC('succeeded'))\n            })\n    }\n}\n\nexport const changeTodolistTitleTC = (id: string, title: string) => {\n    return (dispatch: Dispatch<TodolistReducerActionType>) => {\n        todolistsAPI.updateTodolist(id, title)\n            .then(res => {\n                let action = changeTodolistTitleAC(id, title);\n                dispatch(action);\n            })\n    }\n}","import {\n    AddTodolistActionType,\n    RemoveTodolistActionType,\n    SetTodolistActionType,\n} from \"./todolists-reducer\";\nimport {TaskPriorities, tasksAPI, TaskStatuses, TaskType, TaskUpdateModelType} from \"../../api/tasks-api\";\nimport {Dispatch} from \"redux\";\nimport {AppRootStateType} from \"../../app/store\";\nimport {AppReducerActionsType, setAppStatusAC} from \"../../app/app-reducer\";\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\n\n//type ------------------------------------------------------------------->\nconst REMOVE_TASK = 'REMOVE_TASK';\nconst ADD_TASK = 'ADD_TASK';\nconst UPDATE_TASK = 'UPDATE_TASK';\nconst ADD_TODOLIST = 'ADD_TODOLIST';\nconst REMOVE_TODOLIST = 'REMOVE_TODOLIST';\nconst SET_TODOLIST = 'SET_TODOLIST';\nconst SET_TASKS = 'SET_TASKS';\n\nexport type TasksReducerActionsType =\n    | ReturnType<typeof removeTaskAC>\n    | ReturnType<typeof addTaskAC>\n    | ReturnType<typeof updateTaskAC>\n    | ReturnType<typeof setTasksAC>\n    | AddTodolistActionType\n    | RemoveTodolistActionType\n    | SetTodolistActionType;\n\nexport type UpdateDomainTaskModelType = {\n    title?: string\n    description?: string\n    status?: TaskStatuses\n    priority?: TaskPriorities\n    startDate?: string\n    deadline?: string\n}\nexport type TaskStateType = {\n    [key: string]: Array<TaskType>\n}\nexport type ThunkDispatchType = TasksReducerActionsType | AppReducerActionsType\n\n//initial state ---------------------------------------------------------->\nconst initialState: TaskStateType = {};\n\n//reducer ----------------------------------------------------------------->\nexport const tasksReducer = (state = initialState, action: TasksReducerActionsType): TaskStateType => {\n    switch (action.type) {\n        case ADD_TASK:\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\n        case REMOVE_TASK:\n            return {...state, [action.todolistID]: state[action.todolistID].filter(t => t.id !== action.taskID)}\n        case UPDATE_TASK:\n            return {\n                ...state, [action.todolistID]: state[action.todolistID].map(t =>\n                    t.id === action.taskId ? {...t, ...action.model} : t),\n            }\n        case ADD_TODOLIST:\n            return {...state, [action.todolist.id]: []}\n\n        case REMOVE_TODOLIST:\n            const newState = {...state}\n            delete newState[action.todolistID]\n            return newState\n\n        case SET_TODOLIST:\n            const copyState = {...state}\n            action.todolists.forEach(tl => {\n                copyState[tl.id] = [];\n            })\n            return copyState;\n        case SET_TASKS:\n            return {...state, [action.todolistID]: action.tasks}\n        default:\n            return state;\n    }\n}\n\n\n//actions ---------------------------------------------------------------->\nexport const removeTaskAC = (taskID: string, todolistID: string) =>\n    ({type: 'REMOVE_TASK', taskID: taskID, todolistID: todolistID} as const)\nexport const addTaskAC = (task: TaskType) =>\n    ({type: 'ADD_TASK', task} as const)\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistID: string) =>\n    ({type: `UPDATE_TASK`, taskId, model, todolistID} as const)\nexport const setTasksAC = (tasks: Array<TaskType>, todolistID: string) =>\n    ({type: 'SET_TASKS', tasks, todolistID} as const)\n\n\n//thunks ----------------------------------------------------------------->\nexport const fetchTasksTC = (todolistId: string) => {\n    return (dispatch: Dispatch<ThunkDispatchType>) => {\n        dispatch(setAppStatusAC('loading'))\n        tasksAPI.getTasks(todolistId)\n            .then(res => {\n                dispatch(setTasksAC(res.data.items, todolistId));\n                dispatch(setAppStatusAC('succeeded'))\n            })\n    }\n}\nexport const removeTaskTC = (todolistID: string, taskID: string) => (dispatch: Dispatch<TasksReducerActionsType>) => {\n    tasksAPI.deleteTask(todolistID, taskID)\n        .then(res => {\n            let action = removeTaskAC(taskID, todolistID);\n            dispatch(action);\n        })\n}\nexport const addTaskTC = (title: string, todolistID: string) => (dispatch: Dispatch<ThunkDispatchType>) => {\n    dispatch(setAppStatusAC('loading'))\n    tasksAPI.createTask(todolistID, title)\n        .then(res => {\n            if (res.data.resultCode === 0) {\n                const action = addTaskAC(res.data.data.item);\n                dispatch(action);\n                dispatch(setAppStatusAC('succeeded'));\n            } else {\n                handleServerAppError(res.data, dispatch);\n            }\n        })\n        .catch((error) => {\n            handleServerNetworkError(error, dispatch);\n        })\n}\n\nexport const updateTaskTC = (taskID: string, todolistID: string, domainModel: UpdateDomainTaskModelType) =>\n    (dispatch: Dispatch<ThunkDispatchType>, getState: () => AppRootStateType) => {\n        const state = getState();\n        const task = state.tasks[todolistID].find(t => t.id === taskID);\n        if (!task) {\n            // throw new Error('task not found in the state')\n            console.warn('task not found in the state');\n            return;\n        }\n        const apiModel: TaskUpdateModelType = {\n            title: task.title,\n            description: task.description,\n            priority: task.priority,\n            startDate: task.startDate,\n            deadline: task.deadline,\n            status: task.status,\n            ...domainModel\n        }\n        tasksAPI.updateTask(todolistID, taskID, apiModel)\n            .then(res => {\n                if (res.data.resultCode === 0) {\n                    const action = updateTaskAC(taskID, apiModel, todolistID);\n                    dispatch(action);\n                } else {\n                    handleServerAppError(res.data, dispatch);\n                }\n            })\n            .catch((error) => {\n                handleServerNetworkError(error, dispatch);\n            })\n    }\n","import React, {useState, KeyboardEvent, ChangeEvent} from \"react\";\nimport {IconButton, TextField} from \"@material-ui/core\";\nimport {AddBox} from \"@material-ui/icons\";\n\nexport type AddItemFormType = {\n    addItem: (title: string) => void\n    disabled?: boolean\n}\n\nexport const AddItemForm = React.memo(({addItem, disabled = false}: AddItemFormType) => {\n    console.log('AddItemForm is called')\n\n//* useState\n    const [error, setError] = useState<string | null>(null);\n    const [title, setTitle] = useState<string>('')\n\n//* Callbacks for adding new task, onChange and keyPress events\n    const onClickAddItem = () => {\n        const trimmedTitle = title.trim();\n        if (trimmedTitle) {\n            addItem(trimmedTitle)\n            setTitle('');\n        } else {\n            setError('Title is required');\n        }\n    };\n\n    const onKeyPressAddItem = (e: KeyboardEvent<HTMLInputElement>) => {\n        if(error !== null) {\n            setError(null);\n        }\n        if (e.key === 'Enter') {\n            onClickAddItem();\n        }\n    }\n\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value);\n    }\n\n    return (\n        <div>\n            <TextField\n                disabled={disabled}\n                size={'small'}\n                value={title}\n                onKeyPress={onKeyPressAddItem}\n                onChange={onChangeTitle}\n                error={!!error}\n                label={'Title'}\n                variant={\"outlined\"}\n                helperText={error && 'Title is required'}\n            />\n            <IconButton\n                color={'primary'}\n                onClick={onClickAddItem}\n                disabled={disabled}>\n                <AddBox/>\n            </IconButton>\n        </div>\n    )\n})","import React, {ChangeEvent, useCallback, KeyboardEvent, useState} from \"react\";\nimport {TextField} from \"@material-ui/core\";\n\nexport type EditableSpanType = {\n    value: string\n    changeTitle: (title: string) => void\n}\n\nexport const EditableSpan = React.memo((props: EditableSpanType) => {\n    console.log('EditableSpan is called')\n    const {value, changeTitle} = props;\n\n    const [title, setTitle] = useState<string>(value)\n    const [editMode, setEditMode] = useState<boolean>(false)\n\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n\n /*   const onEditMode = () => {\n        //setTitle(value)\n        setEditMode(true)\n        //changeTitle(value)\n    }*/\n    const onEditMode = useCallback(() => {\n        setEditMode(true)\n        changeTitle(value)\n    }, [changeTitle, value])\n\n  /*  const offEditMode = () => {\n        setEditMode(false)\n        changeTitle(title);\n    }*/\n    const offEditMode = useCallback(() => {\n        setEditMode(false)\n        changeTitle(title);\n    }, [changeTitle, title])\n\n    const onPressEnterOffEditMode = (e: KeyboardEvent<HTMLDivElement>) => {\n        if (e.key === 'Enter') {\n            offEditMode()\n        }\n    }\n    return (\n        editMode\n            ? <TextField\n                onChange={onChangeTitle}\n                value={title}\n                onBlur={offEditMode}\n                onKeyPress={onPressEnterOffEditMode}\n                autoFocus\n            />\n            : <span onDoubleClick={onEditMode}>{value}</span>\n    )\n})","import React, {ChangeEvent, useCallback} from \"react\";\nimport {Checkbox, IconButton} from \"@material-ui/core\";\nimport {EditableSpan} from \"../../../../components/EditableSpan/EditableSpan\";\nimport {Delete} from \"@material-ui/icons\";\nimport {TaskStatuses, TaskType} from \"../../../../api/tasks-api\";\n\n\nexport type TasksPropsType = {\n    task: TaskType\n    removeTask: (taskID: string, todoListID: string) => void\n    todolistID: string\n    changeTaskStatus: (taskId: string, status: TaskStatuses, todoListID: string) => void\n    changeTaskTitle: (taskId: string, title: string, todoListID: string) => void\n}\n\nexport const Task = React.memo((props: TasksPropsType) => {\n\n    const {\n        task,\n        removeTask,\n        changeTaskStatus,\n        changeTaskTitle,\n        todolistID,\n    } = props;\n\n    const removeTaskHandler = useCallback(() => removeTask(task.id, todolistID), [task.id, todolistID, removeTask])\n\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => changeTaskStatus(task.id, e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New, todolistID), [task.id, todolistID, changeTaskStatus])\n\n    const changeTaskTitleHandler = useCallback((title: string) => {\n        changeTaskTitle(task.id, title, todolistID)\n    }, [task.id, todolistID, changeTaskTitle])\n\n    return (\n        <div className={task.status === TaskStatuses.Completed ? 'is-done' : ''}>\n            <Checkbox\n                checked={task.status === TaskStatuses.Completed}\n                onChange={onChangeHandler}\n                color={'primary'}\n            />\n            <EditableSpan\n                changeTitle={changeTaskTitleHandler}\n                value={task.title}/>\n            <IconButton onClick={removeTaskHandler}>\n                <Delete/>\n            </IconButton>\n        </div>\n    )\n})","import React, {useCallback, useEffect} from \"react\";\nimport {AddItemForm} from \"../../../components/AddItemForm/AddItemForm\";\nimport {EditableSpan} from \"../../../components/EditableSpan/EditableSpan\";\nimport {Button, IconButton} from \"@material-ui/core\";\nimport {Delete} from \"@material-ui/icons\";\nimport {Task} from \"./Task/Task\";\nimport {TaskStatuses, TaskType} from \"../../../api/tasks-api\";\nimport {FilterValuesType, TodolistDomainType} from \"../todolists-reducer\";\nimport {useDispatch} from \"react-redux\";\nimport {fetchTasksTC} from \"../tasks-reducer\";\n\nexport type TodolistPropsType = {\n    todolist: TodolistDomainType\n    tasks: Array<TaskType>\n    changeTaskTitle: (taskId: string, title: string, todolistID: string) => void\n    deleteTodoList: (todolistID: string) => void\n    removeTask: (taskID: string, todolistID: string) => void;\n    changeFilter: (value: FilterValuesType, todolistID: string) => void;\n    addTask: (title: string, todolistID: string) => void\n    changeTaskStatus: (taskId: string, status: TaskStatuses, todolistID: string) => void\n    changeTodolistTitle: (newTitle: string, todolistID: string) => void\n    demo?: boolean\n}\n\nexport const Todolist = React.memo(({demo = false, ...props}: TodolistPropsType) => {\n\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        if(demo) return;\n        dispatch(fetchTasksTC(props.todolist.id))\n    }, [])\n\n    const deleteTodoListHendler = useCallback(() => props.deleteTodoList(props.todolist.id), [props.deleteTodoList, props.todolist.id]);\n    const changeTodolistTitleHandler = useCallback((newTitle: string) => props.changeTodolistTitle(props.todolist.id, newTitle), [props.changeTodolistTitle, props.todolist.id]);\n    const addTaskHandler = useCallback((title: string) => {\n        props.addTask(title, props.todolist.id)\n    }, [props.addTask, props.todolist.id]);\n\n\n    const onClickAllFilter = useCallback(() => props.changeFilter('all', props.todolist.id), [props.changeFilter, props.todolist.id]);\n    const onClickActiveFilter = useCallback(() => props.changeFilter('active', props.todolist.id), [props.changeFilter, props.todolist.id]);\n    const onClickCompletedFilter = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.changeFilter, props.todolist.id]);\n\n\n//* Todolist filters logic\n    let tasksForTodolist = props.tasks;\n    if (props.todolist.filter === 'completed') {\n        tasksForTodolist =props.tasks.filter(t => t.status === TaskStatuses.Completed)\n    }\n    if (props.todolist.filter === 'active') {\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\n    }\n\n\n    return (\n        <div>\n            <div>\n                <h3>\n                    <EditableSpan\n                        value={props.todolist.title}\n                        changeTitle={changeTodolistTitleHandler}\n                    />\n                    <IconButton onClick={deleteTodoListHendler}\n                                disabled={props.todolist.entityStatus === 'loading'}>\n                        <Delete/>\n                    </IconButton>\n                </h3>\n                <AddItemForm addItem={addTaskHandler} disabled={props.todolist.entityStatus === 'loading'}/>\n                <ul style={{listStyle: 'none', paddingLeft: '0'}}>\n                    {tasksForTodolist.map(t => {\n                        return <Task\n                            task={t}\n                            key={t.id}\n                            removeTask={props.removeTask}\n                            todolistID={props.todolist.id}\n                            changeTaskStatus={props.changeTaskStatus}\n                            changeTaskTitle={props.changeTaskTitle}\n                        />\n                    })}\n                </ul>\n\n                <div>\n                    <Button\n                        style={{marginLeft: '3px'}}\n                        color={\"primary\"}\n                        variant={props.todolist.filter === 'all' ? 'contained' : 'outlined'}\n                        onClick={onClickAllFilter}>All\n                    </Button>\n                    <Button\n                        style={{marginLeft: '3px'}}\n                        color={\"primary\"}\n                        variant={props.todolist.filter === 'active' ? 'contained' : 'outlined'}\n                        onClick={onClickActiveFilter}>Active\n                    </Button>\n                    <Button\n                        style={{marginLeft: '3px'}}\n                        color={\"primary\"}\n                        variant={props.todolist.filter === 'completed' ? 'contained' : 'outlined'}\n                        onClick={onClickCompletedFilter}>Completed\n                    </Button>\n                </div>\n            </div>\n        </div>\n    )\n})","import {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../app/store\";\nimport {\n    addTodolistTC, changeTodolistFilterAC,\n    changeTodolistTitleTC,\n    fetchTodolistsTC, FilterValuesType,\n    removeTodolistTC,\n    TodolistDomainType\n} from \"./todolists-reducer\";\nimport {addTaskTC, removeTaskTC, TaskStateType, updateTaskTC} from \"./tasks-reducer\";\nimport React, {useCallback, useEffect} from \"react\";\nimport {TaskStatuses} from \"../../api/tasks-api\";\nimport {Grid, Paper} from \"@material-ui/core\";\nimport {AddItemForm} from \"../../components/AddItemForm/AddItemForm\";\nimport {Todolist} from \"./Todolist/Todolist\";\nimport {Redirect} from \"react-router-dom\";\n\n\ntype PropsType = {\n    demo?: boolean\n}\nexport const Todolists = ({demo = false}: PropsType) => {\n    console.log('Todolists R')\n\n    const dispatch = useDispatch();\n    const todolists = useSelector<AppRootStateType, TodolistDomainType[]>(state => state.todolists);\n    const tasks = useSelector<AppRootStateType, TaskStateType>(state => state.tasks);\n    const isAuth = useSelector<AppRootStateType, boolean>(state => state.auth.isAuth)\n\n    useEffect(() => {\n        if(demo || !isAuth) return;\n        const thunk = fetchTodolistsTC();\n        dispatch(thunk);\n    }, [])\n\n\n//* Callbacks for Tasks\n    const addTask = useCallback((title: string, todolistID: string) => {\n        const thunk = addTaskTC(title, todolistID);\n        dispatch(thunk);\n    }, [dispatch]);\n\n    const removeTask = useCallback((taskID: string, todolistID: string) => {\n        const thunk = removeTaskTC(todolistID, taskID);\n        dispatch(thunk);\n    }, [dispatch]);\n\n    const changeTaskStatus = useCallback((taskId: string, status: TaskStatuses, todoListID: string) => {\n        let thunk = updateTaskTC(taskId, todoListID, {status});\n        dispatch(thunk);\n    }, [dispatch]);\n\n    const changeTaskTitle = useCallback((taskId: string, newTitle: string, todoListID: string) => {\n        let thunk = updateTaskTC(taskId, todoListID, {title: newTitle});\n        dispatch(thunk);\n    }, [dispatch]);\n\n//* Callbacks for Todolists\n    const addTodoList = useCallback((title: string) => {\n        let thunk = addTodolistTC(title);\n        dispatch(thunk);\n    }, [dispatch])\n\n    const removeTodoList = useCallback((todolistID: string) => {\n        let thunk = removeTodolistTC(todolistID);\n        dispatch(thunk);\n        //dispatch(action);\n    }, [dispatch])\n\n    const changeTodolistTitle = useCallback((newTitle: string, todolistID: string) => {\n        let thunk = changeTodolistTitleTC(newTitle, todolistID);\n        dispatch(thunk);\n    }, [dispatch])\n\n    const changeFilter = useCallback((value: FilterValuesType, todolistID: string) => {\n        let action = changeTodolistFilterAC(todolistID, value);\n        dispatch(action);\n    }, [dispatch]);\n\n    if(!isAuth) return <Redirect to={'/login'} />\n\n    return (\n        <>\n            <Grid container style={{padding: '20px 0'}}>\n                <AddItemForm addItem={addTodoList}/>\n            </Grid>\n\n            <Grid\n                container spacing={3}\n                style={{justifyContent: 'space-evenly'}}>\n                {todolists.map(tl => {\n                    return (<Grid item key={tl.id}>\n                            <Paper elevation={20} style={{padding: '15px'}}>\n                                <Todolist\n                                    todolist={tl}\n                                    tasks={tasks[tl.id]}\n                                    deleteTodoList={removeTodoList}\n                                    addTask={addTask}\n                                    changeTaskTitle={changeTaskTitle}\n                                    changeTaskStatus={changeTaskStatus}\n                                    removeTask={removeTask}\n                                    changeFilter={changeFilter}\n                                    changeTodolistTitle={changeTodolistTitle}\n                                    demo={demo}\n                                />\n                            </Paper>\n                        </Grid>\n                    )\n                })}\n            </Grid>\n        </>\n    )\n}\n","import React from 'react';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../app/store\";\nimport {setAppErrorAC} from \"../../app/app-reducer\";\n\n\nfunction Alert(props: AlertProps) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\n\nexport function ErrorSnackbars() {\n   // const [open, setOpen] = React.useState(false);\n//показывать или не показывать snackbar (засовывать или не засовываать ему в пропсы open=true/false) будем на основе того, что сидит у нас в state, для этого достаем данные из стетйта\n    const error = useSelector<AppRootStateType, null | string>(state => state.app.error)\n    const dispatch = useDispatch();\n\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        dispatch(setAppErrorAC(null))\n    };\n\n    return (\n        <Snackbar open={!!error} autoHideDuration={6000} onClose={handleClose}>\n                <Alert onClose={handleClose} severity=\"error\">\n                    {error}\n                </Alert>\n            </Snackbar>\n    );\n}\n","import React from 'react'\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\nimport {useFormik} from \"formik\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {loginTC} from \"./auth-reducer\";\nimport {LoginParamsType} from \"../../api/auth-api\";\nimport { Redirect } from 'react-router-dom';\nimport {AppRootStateType} from \"../../app/store\";\n\nexport const Login = () => {\n\n    const dispatch = useDispatch();\n    const isAuth = useSelector<AppRootStateType, boolean>(state => state.auth.isAuth)\n\n    const formik = useFormik<LoginParamsType>({\n        validate: (values) => {\n            if (!values.email) {\n                return {\n                    email: 'Email is required'\n                }\n            }\n            if (!values.password) {\n                return {\n                    password: 'Password is required'\n                }\n            }\n        },\n        initialValues: {\n            email: '',\n            password: '',\n            rememberMe: false\n        },\n        onSubmit: values => {\n            dispatch(loginTC(values))\n        },\n    });\n\n    if(isAuth) {\n        return <Redirect to={'/'} />\n    }\n\n    return <Grid container justify=\"center\">\n        <Grid item xs={4}>\n            <form onSubmit={formik.handleSubmit}>\n                <FormControl>\n                    <FormLabel>\n                        <p>To log in get registered\n                            <a href={'https://social-network.samuraijs.com/'}\n                               target={'_blank'}> here\n                            </a>\n                        </p>\n                        <p>or use common test account credentials:</p>\n                        <p>Email: free@samuraijs.com</p>\n                        <p>Password: free</p>\n                    </FormLabel>\n                    <FormGroup>\n                        <TextField\n                            label=\"Email\"\n                            margin=\"normal\"\n                            {...formik.getFieldProps('email')}\n                        />\n                        {formik.errors.email ? <div>{formik.errors.email}</div> : null}\n                        <TextField\n                            type=\"password\"\n                            label=\"Password\"\n                            margin=\"normal\"\n                            {...formik.getFieldProps('password')}\n                        />\n                        {formik.errors.password ? <div>{formik.errors.password}</div> : null}\n                        <FormControlLabel\n                            label={'Remember me'}\n                            control={<Checkbox {...formik.getFieldProps('rememberMe')}\n                                               checked={formik.values.rememberMe}/>}\n                        />\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\n                    </FormGroup>\n                </FormControl>\n            </form>\n        </Grid>\n    </Grid>\n}\n","import React, {useCallback, useEffect} from 'react';\nimport './App.css';\nimport {\n    AppBar,\n    Button,\n    CircularProgress,\n    Container,\n    IconButton,\n    LinearProgress,\n    Toolbar,\n    Typography\n} from \"@material-ui/core\";\nimport {Menu} from \"@material-ui/icons\";\nimport {Todolists} from \"../features/Todolists/Todolists\";\nimport {ErrorSnackbars} from \"../components/ErrorSnackbar/ErrirSnackbar\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"./store\";\nimport {initializeAppTC, RequestStatusType} from \"./app-reducer\";\nimport {Redirect, Route, Switch} from \"react-router-dom\";\nimport {Login} from \"../features/Login/Login\";\nimport {logoutTC} from \"../features/Login/auth-reducer\";\n\ntype PropsType = {\n    demo?: boolean\n}\nconst App = ({demo = false}: PropsType) => {\n    console.log('AppWithUserState is called')\n    console.log('CHECK')\n\n    const dispatch = useDispatch()\n\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\n    const isAppInitialized = useSelector<AppRootStateType, boolean>((state) => state.app.isAppInitialized)\n    const isAuth = useSelector<AppRootStateType, boolean>(state => state.auth.isAuth)\n\n\n    useEffect(() => {\n        dispatch(initializeAppTC())\n    }, [dispatch])\n\n    const logoutHandler = useCallback(() => {\n        dispatch(logoutTC())\n    }, [dispatch])\n\n    if (!isAppInitialized) return <div style={{position: 'fixed', top: '40%', left: '50%'}}>\n        <CircularProgress style={{width: '100px'}}/>\n    </div>\n\n    //UI:\n    return (\n            <div className=\"App\">\n                <ErrorSnackbars/>\n                <AppBar position={'static'}>\n                    <Toolbar style={{justifyContent: 'space-between'}}>\n                        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                            <Menu/>\n                        </IconButton>\n\n                        <Typography variant=\"h6\">\n                            TodoLists\n                        </Typography>\n                        {isAuth ? <Button color=\"inherit\"\n                                          onClick={() => logoutHandler()}>Log out</Button>\n                            : <span>&#128269;</span>}\n                    </Toolbar>\n                </AppBar>\n\n                {status === 'loading' && <LinearProgress/>}\n\n                <Container fixed>\n                    <Switch>\n                        <Route exact path={'/'} render={() => <Todolists demo={demo}/>}/>\n                        <Route path={'/login'} render={() => <Login/>}/>\n                        <Route path={'/404'} render={() => <h1>404: PAGE NOT FOUND</h1>}/>\n                        <Redirect from={'*'} to={'/404'}/>\n                    </Switch>\n                </Container>\n            </div>\n    )\n}\n\n\nexport default App;","import {TasksReducerActionsType, tasksReducer} from '../features/Todolists/tasks-reducer';\nimport {TodolistReducerActionType, todolistReducer} from '../features/Todolists/todolists-reducer';\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\";\nimport {appReducer, AppReducerActionsType} from \"./app-reducer\";\nimport {AuthReducerActionsType, authReducer} from \"../features/Login/auth-reducer\";\n\n// объединяя reducer-ы с помощью combineReducers,\n// мы задаём структуру нашего единственного объекта-состояния\nconst rootReducer = combineReducers({\n    tasks: tasksReducer,\n    todolists: todolistReducer,\n    app: appReducer,\n    auth: authReducer\n\n})\n\nexport type StoreType = typeof store;\n\n// непосредственно создаём store\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n// определить автоматически тип всего объекта состояния\nexport type AppRootStateType = ReturnType<typeof rootReducer>\n\nexport type AppActionType = TodolistReducerActionType | TasksReducerActionsType | AuthReducerActionsType | AppReducerActionsType\nexport type AppThunkType<ReturnType = void> = ThunkAction<ReturnType, AppRootStateType, unknown, AppActionType>\n\n\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\n// @ts-ignore\nwindow.store = store;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport App from \"./app/App\";\nimport {store} from \"./app/store\";\nimport {HashRouter} from \"react-router-dom\";\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <HashRouter>\n    <App />\n        </HashRouter>\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}